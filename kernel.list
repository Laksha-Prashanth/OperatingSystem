
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea0000ad 	b	82bc <main>

Disassembly of section .text:

00008004 <SetForeColour>:
    8004:	e3500801 	cmp	r0, #65536	; 0x10000
    8008:	21a0f00e 	movcs	pc, lr
    800c:	e59f1144 	ldr	r1, [pc, #324]	; 8158 <charPixelLoopEnd$+0x1c>
    8010:	e1c100b0 	strh	r0, [r1]
    8014:	e1a0f00e 	mov	pc, lr

00008018 <SetGraphicsAddress>:
    8018:	e59f113c 	ldr	r1, [pc, #316]	; 815c <charPixelLoopEnd$+0x20>
    801c:	e5810000 	str	r0, [r1]
    8020:	e1a0f00e 	mov	pc, lr

00008024 <DrawPixel>:
    8024:	e59f2130 	ldr	r2, [pc, #304]	; 815c <charPixelLoopEnd$+0x20>
    8028:	e5922000 	ldr	r2, [r2]
    802c:	e5923004 	ldr	r3, [r2, #4]
    8030:	e2433001 	sub	r3, r3, #1
    8034:	e1510003 	cmp	r1, r3
    8038:	81a0f00e 	movhi	pc, lr
    803c:	e5923000 	ldr	r3, [r2]
    8040:	e2433001 	sub	r3, r3, #1
    8044:	e1500003 	cmp	r0, r3
    8048:	81a0f00e 	movhi	pc, lr
    804c:	e5922020 	ldr	r2, [r2, #32]
    8050:	e2833001 	add	r3, r3, #1
    8054:	e0200391 	mla	r0, r1, r3, r0
    8058:	e0822080 	add	r2, r2, r0, lsl #1
    805c:	e59f30f4 	ldr	r3, [pc, #244]	; 8158 <charPixelLoopEnd$+0x1c>
    8060:	e1d330b0 	ldrh	r3, [r3]
    8064:	e1c230b0 	strh	r3, [r2]
    8068:	e1a0f00e 	mov	pc, lr

0000806c <DrawLine>:
    806c:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8070:	e1a09000 	mov	r9, r0
    8074:	e1a0a002 	mov	sl, r2
    8078:	e1a0b001 	mov	fp, r1
    807c:	e1a0c003 	mov	ip, r3
    8080:	e159000a 	cmp	r9, sl
    8084:	c049400a 	subgt	r4, r9, sl
    8088:	c3e07000 	mvngt	r7, #0
    808c:	d049500a 	suble	r5, r9, sl
    8090:	d3a06001 	movle	r6, #1
    8094:	e15b000c 	cmp	fp, ip
    8098:	c04c500b 	subgt	r5, ip, fp
    809c:	c3e07000 	mvngt	r7, #0
    80a0:	d04b500c 	suble	r5, fp, ip
    80a4:	d3a07001 	movle	r7, #1
    80a8:	e0848005 	add	r8, r4, r5
    80ac:	e08aa006 	add	sl, sl, r6
    80b0:	e08cc007 	add	ip, ip, r7

000080b4 <pixelLoop$>:
    80b4:	e139000a 	teq	r9, sl
    80b8:	113b000c 	teqne	fp, ip
    80bc:	08bd9ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    80c0:	e1a00009 	mov	r0, r9
    80c4:	e1a0100b 	mov	r1, fp
    80c8:	ebffffd5 	bl	8024 <DrawPixel>
    80cc:	e1550088 	cmp	r5, r8, lsl #1
    80d0:	d0888005 	addle	r8, r8, r5
    80d4:	d0899006 	addle	r9, r9, r6
    80d8:	e1540088 	cmp	r4, r8, lsl #1
    80dc:	a0888004 	addge	r8, r8, r4
    80e0:	a08bb007 	addge	fp, fp, r7
    80e4:	eafffff2 	b	80b4 <pixelLoop$>

000080e8 <DrawCharacter>:
    80e8:	e350007f 	cmp	r0, #127	; 0x7f
    80ec:	83a00000 	movhi	r0, #0
    80f0:	83a01000 	movhi	r1, #0
    80f4:	81a0f00e 	movhi	pc, lr
    80f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80fc:	e1a04001 	mov	r4, r1
    8100:	e1a05002 	mov	r5, r2
    8104:	e59f6054 	ldr	r6, [pc, #84]	; 8160 <charPixelLoopEnd$+0x24>
    8108:	e0866200 	add	r6, r6, r0, lsl #4

0000810c <lineLoop$>:
    810c:	e5d67000 	ldrb	r7, [r6]
    8110:	e3a08008 	mov	r8, #8

00008114 <charPixelLoop$>:
    8114:	e2588001 	subs	r8, r8, #1
    8118:	ba000007 	blt	813c <charPixelLoopEnd$>
    811c:	e1a07087 	lsl	r7, r7, #1
    8120:	e3170c01 	tst	r7, #256	; 0x100
    8124:	0afffffa 	beq	8114 <charPixelLoop$>
    8128:	e0840008 	add	r0, r4, r8
    812c:	e1a01005 	mov	r1, r5
    8130:	ebffffbb 	bl	8024 <DrawPixel>
    8134:	e3380000 	teq	r8, #0
    8138:	1afffff5 	bne	8114 <charPixelLoop$>

0000813c <charPixelLoopEnd$>:
    813c:	e2855001 	add	r5, r5, #1
    8140:	e2866001 	add	r6, r6, #1
    8144:	e316000f 	tst	r6, #15
    8148:	1affffef 	bne	810c <lineLoop$>
    814c:	e3a00008 	mov	r0, #8
    8150:	e3a01010 	mov	r1, #16
    8154:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8158:	00008390 	.word	0x00008390
    815c:	00008394 	.word	0x00008394
    8160:	000083a0 	.word	0x000083a0

00008164 <InitialiseFrameBuffer>:
    8164:	e3500a01 	cmp	r0, #4096	; 0x1000
    8168:	93510a01 	cmpls	r1, #4096	; 0x1000
    816c:	93520020 	cmpls	r2, #32
    8170:	83a00000 	movhi	r0, #0
    8174:	81a0f00e 	movhi	pc, lr
    8178:	e92d4010 	push	{r4, lr}
    817c:	e59f403c 	ldr	r4, [pc, #60]	; 81c0 <InitialiseFrameBuffer+0x5c>
    8180:	e5840000 	str	r0, [r4]
    8184:	e5841004 	str	r1, [r4, #4]
    8188:	e5840008 	str	r0, [r4, #8]
    818c:	e584100c 	str	r1, [r4, #12]
    8190:	e5842014 	str	r2, [r4, #20]
    8194:	e1a00004 	mov	r0, r4
    8198:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
    819c:	e3a01001 	mov	r1, #1
    81a0:	eb000029 	bl	824c <MailboxWrite>
    81a4:	e3a00001 	mov	r0, #1
    81a8:	eb000034 	bl	8280 <MailboxRead>
    81ac:	e3300000 	teq	r0, #0
    81b0:	13a00000 	movne	r0, #0
    81b4:	18bd8010 	popne	{r4, pc}
    81b8:	e1a00004 	mov	r0, r4
    81bc:	e8bd8010 	pop	{r4, pc}
    81c0:	00008ba0 	.word	0x00008ba0

000081c4 <GetGpioAddress>:
    81c4:	e59f0074 	ldr	r0, [pc, #116]	; 8240 <SetGpio+0x3c>
    81c8:	e1a0f00e 	mov	pc, lr

000081cc <SetGpioFunction>:
    81cc:	e3500035 	cmp	r0, #53	; 0x35
    81d0:	93510007 	cmpls	r1, #7
    81d4:	81a0f00e 	movhi	pc, lr
    81d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    81dc:	e1a02000 	mov	r2, r0
    81e0:	ebfffff7 	bl	81c4 <GetGpioAddress>

000081e4 <functionLoop$>:
    81e4:	e3520009 	cmp	r2, #9
    81e8:	8242200a 	subhi	r2, r2, #10
    81ec:	82800004 	addhi	r0, r0, #4
    81f0:	8afffffb 	bhi	81e4 <functionLoop$>
    81f4:	e0822082 	add	r2, r2, r2, lsl #1
    81f8:	e1a01211 	lsl	r1, r1, r2
    81fc:	e5801000 	str	r1, [r0]
    8200:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008204 <SetGpio>:
    8204:	e3500035 	cmp	r0, #53	; 0x35
    8208:	81a0f00e 	movhi	pc, lr
    820c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8210:	e1a02000 	mov	r2, r0
    8214:	ebffffea 	bl	81c4 <GetGpioAddress>
    8218:	e1a032a2 	lsr	r3, r2, #5
    821c:	e1a03103 	lsl	r3, r3, #2
    8220:	e0800003 	add	r0, r0, r3
    8224:	e202201f 	and	r2, r2, #31
    8228:	e3a03001 	mov	r3, #1
    822c:	e1a03213 	lsl	r3, r3, r2
    8230:	e3310000 	teq	r1, #0
    8234:	05803028 	streq	r3, [r0, #40]	; 0x28
    8238:	1580301c 	strne	r3, [r0, #28]
    823c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8240:	20200000 	.word	0x20200000

00008244 <GetMailboxBase>:
    8244:	e59f006c 	ldr	r0, [pc, #108]	; 82b8 <rightmail$+0x24>
    8248:	e1a0f00e 	mov	pc, lr

0000824c <MailboxWrite>:
    824c:	e310000f 	tst	r0, #15
    8250:	11a0f00e 	movne	pc, lr
    8254:	e351000f 	cmp	r1, #15
    8258:	81a0f00e 	movhi	pc, lr
    825c:	e1a02000 	mov	r2, r0
    8260:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8264:	ebfffff6 	bl	8244 <GetMailboxBase>

00008268 <wait1$>:
    8268:	e5903018 	ldr	r3, [r0, #24]
    826c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    8270:	1afffffc 	bne	8268 <wait1$>
    8274:	e0822001 	add	r2, r2, r1
    8278:	e5802020 	str	r2, [r0, #32]
    827c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008280 <MailboxRead>:
    8280:	e350000f 	cmp	r0, #15
    8284:	81a0f00e 	movhi	pc, lr
    8288:	e1a01000 	mov	r1, r0
    828c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8290:	ebffffeb 	bl	8244 <GetMailboxBase>

00008294 <rightmail$>:
    8294:	e5902018 	ldr	r2, [r0, #24]
    8298:	e3120101 	tst	r2, #1073741824	; 0x40000000
    829c:	1afffffc 	bne	8294 <rightmail$>
    82a0:	e5902000 	ldr	r2, [r0]
    82a4:	e202300f 	and	r3, r2, #15
    82a8:	e1330001 	teq	r3, r1
    82ac:	1afffff8 	bne	8294 <rightmail$>
    82b0:	e3c2000f 	bic	r0, r2, #15
    82b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    82b8:	2000b880 	.word	0x2000b880

000082bc <main>:
    82bc:	e3a0d902 	mov	sp, #32768	; 0x8000
    82c0:	e3a00b01 	mov	r0, #1024	; 0x400
    82c4:	e3a01c03 	mov	r1, #768	; 0x300
    82c8:	e3a02010 	mov	r2, #16
    82cc:	ebffffa4 	bl	8164 <InitialiseFrameBuffer>
    82d0:	e3300000 	teq	r0, #0
    82d4:	1a000006 	bne	82f4 <noError$>
    82d8:	e3a00010 	mov	r0, #16
    82dc:	e3a01001 	mov	r1, #1
    82e0:	ebffffb9 	bl	81cc <SetGpioFunction>
    82e4:	e3a00010 	mov	r0, #16
    82e8:	e3a01000 	mov	r1, #0
    82ec:	ebffffc4 	bl	8204 <SetGpio>

000082f0 <error$>:
    82f0:	eafffffe 	b	82f0 <error$>

000082f4 <noError$>:
    82f4:	e1a04000 	mov	r4, r0
    82f8:	ebffff46 	bl	8018 <SetGraphicsAddress>

000082fc <render$>:
    82fc:	e5943020 	ldr	r3, [r4, #32]
    8300:	e59f0028 	ldr	r0, [pc, #40]	; 8330 <render$+0x34>
    8304:	ebffff3e 	bl	8004 <SetForeColour>
    8308:	e3a00005 	mov	r0, #5
    830c:	e3a01005 	mov	r1, #5
    8310:	e59f201c 	ldr	r2, [pc, #28]	; 8334 <render$+0x38>
    8314:	e59f3018 	ldr	r3, [pc, #24]	; 8334 <render$+0x38>
    8318:	ebffff53 	bl	806c <DrawLine>
    831c:	e3a0004b 	mov	r0, #75	; 0x4b
    8320:	e3a01019 	mov	r1, #25
    8324:	e3a02019 	mov	r2, #25
    8328:	ebffff6e 	bl	80e8 <DrawCharacter>
    832c:	eafffff2 	b	82fc <render$>
    8330:	0000f0ff 	.word	0x0000f0ff
    8334:	0000fff5 	.word	0x0000fff5

00008338 <Random>:
    8338:	e3a01cef 	mov	r1, #61184	; 0xef00
    833c:	e0010190 	mul	r1, r0, r1
    8340:	e0010190 	mul	r1, r0, r1
    8344:	e0811000 	add	r1, r1, r0
    8348:	e2810049 	add	r0, r1, #73	; 0x49
    834c:	e1a0f00e 	mov	pc, lr

00008350 <GetSystemTimerBase>:
    8350:	e59f0030 	ldr	r0, [pc, #48]	; 8388 <loop$+0x10>
    8354:	e1a0f00e 	mov	pc, lr

00008358 <GetTimeStamp>:
    8358:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    835c:	ebfffffb 	bl	8350 <GetSystemTimerBase>
    8360:	e1c000d0 	ldrd	r0, [r0]
    8364:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008368 <Wait>:
    8368:	e1a02000 	mov	r2, r0
    836c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8370:	ebfffff8 	bl	8358 <GetTimeStamp>
    8374:	e0822000 	add	r2, r2, r0

00008378 <loop$>:
    8378:	ebfffff6 	bl	8358 <GetTimeStamp>
    837c:	e1500002 	cmp	r0, r2
    8380:	9afffffc 	bls	8378 <loop$>
    8384:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8388:	20003004 	.word	0x20003004
